.doc
  %h1 Repara Clujul API Doc
  %p
    The API has two main components. The Image Upload Service and the Issue Reporting Service. There is an
    %a{:href => '/eula'} eula page
    and an
    %a{:href => '/about'} about page

  %p All requests will be surrounded with
  %pre= pretty_json(render_response_without_changing_status('this is where the content will be').to_json)

  %h2 Image Upload Service
  %p Used to upload <b>png</b> images to the server. Will return a public url for the image and an url for the server generated thumbnail
  %p <b>POST</b> /upload with 'image' param
  %p Examples:
  %p curl -X POST -F "image=@public/images/logo.png" #{base_url}upload
  %p
    %a{:href => '/up'} form example
  %p Sample response:
  %pre= pretty_json(doc_image)

  %h2 Issue Reporting Service
  %p All requests should have the Content-Type header set to <b>application/json</b>
  %p If no address is specified, the issue will be geocoded from lat and lon
  %p Example issue
  %pre= pretty_json doc_issue.to_json
  %p Example response
  %pre= pretty_json(render_response_without_changing_status(doc_issue).to_json)
  %p Example error
  %pre= pretty_json(render_response_without_changing_status('issue with id bla not found', 404).to_json)
  %h3 Requests
  %p <b>GET</b> /meta
  %p
    %a{:href => '/meta'} example

  %br
  %p <b>GET</b> /issues
  %p Optional query params limit (default 10) and skip (default 0)
  %p
    %a{:href => '/issues'} example

  %br
  %p <b>POST</b> /issues
  %p curl -X POST -H 'Content-Type: application/json' -d '{"name":"hello", "category":"altele", "lat":0, "lon":0,"images":[{"url": "#{base_url}images/logo.png"}]}' #{base_url}issues
  %p Required body params: name, category, lat, lon, images
  %p
    Valid categories:
    = Repara.categories

  %br
  %p <b>PUT</b> /issues/:id
  %p curl -X PUT -H 'Content-Type: application/json' -d '{"name":"test2"}' #{base_url}issues/#{doc_issue['_id']}

  %br
  %p <b>PUT</b> /issues/:id/add_to_set
  %p curl -X PUT -H 'Content-Type: application/json' -d '{"images":[{"url":"#{base_url}images/logo2.png"}]}' #{base_url}issues/#{doc_issue['_id']}/add_to_set
  %p required body
  %pre= pretty_json({'images' => ['url1', 'url2'] }.to_json)

  - if Repara.config['allow_delete_all']
    %br
    %p <b>DELETE</b> /issues
    %p example response:
    %pre= pretty_json(render_response_without_changing_status(generate_delete_response(42)).to_json)

    %br
    %p <b>DELETE</b> /images
    %p example response:
    %pre= pretty_json(render_response_without_changing_status(generate_delete_response(42)).to_json)

  %br
  %h3 Request codes
  - RequestCodes.constants.each do |rc|
    %p <b>#{RequestCodes.const_get(rc)}</b> #{rc.to_s.gsub('_', ' ').downcase}
